# -*- coding: utf-8 -*-
"""PCA_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YpS6LIIXRg3HuvRDDjdLZbQ8g3-8WM-7
"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Import necessary packages
import pandas as pd
import numpy as np
import scipy
from scipy import stats
from statsmodels.stats.multitest import multipletests
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import seaborn as sns
import matplotlib.pyplot as plt

# Download data
# Dataframe where the only gene columns are those identified as DEGs for the APOE4+ group
apoe4_all_df = pd.read_csv('/content/drive/My Drive/440 project/subsets/apoe4_all_df.csv')
# Dataframe where the only gene columns are those identified as DEGs for the APOE4- group
no_apoe4_all_df = pd.read_csv('/content/drive/My Drive/440 project/subsets/no_apoe4_all_df.csv')

# Split group label into components
values = apoe4_all_df['group']
split_values = [tuple(value.split("_")) for value in values]
apoe4, tbi, dementia = zip(*split_values)
apoe4_all_df['apoe4'] = apoe4
apoe4_all_df['tbi'] = tbi
apoe4_all_df['dementia'] = dementia
apoe4_all_df.drop(['group'], axis=1, inplace=True)
# Subset donors who have TBI
apoe4_all_tbi = apoe4_all_df[apoe4_all_df['tbi'] == 'Y']
# Create 2 separate subsets of the donors with TBI, with and wiithout APOE4 allele
apoe4_all_tbi_allele = apoe4_all_tbi[apoe4_all_tbi['apoe4'] == 'Y']
apoe4_all_tbi_no_allele = apoe4_all_tbi[apoe4_all_tbi['apoe4'] == 'N']

# Split group label into components
values = no_apoe4_all_df['group']
split_values = [tuple(value.split("_")) for value in values]
apoe4, tbi, dementia = zip(*split_values)
no_apoe4_all_df['apoe4'] = apoe4
no_apoe4_all_df['tbi'] = tbi
no_apoe4_all_df['dementia'] = dementia
no_apoe4_all_df.drop(['group'], axis=1, inplace=True)
# Subset donors who have TBI
no_apoe4_all_tbi = no_apoe4_all_df[no_apoe4_all_df['tbi'] == 'Y']
# Create 2 separate subsets of the donors with TBI, with and wiithout APOE4 allele
no_apoe4_all_tbi_allele = no_apoe4_all_tbi[no_apoe4_all_tbi['apoe4'] == 'Y']
no_apoe4_all_tbi_no_allele = no_apoe4_all_tbi[no_apoe4_all_tbi['apoe4'] == 'N']

# Create a function to calculate Mahalanobis distance
def mahalanobis_distance(x1, x2, cov):
    """
    Calculate the Mahalanobis distance between two vectors x1 and x2
    with covariance matrix cov.

    Args:
    x1, x2: 1-D arrays representing the two vectors
    cov: 2-D array representing the covariance matrix

    Returns:
    Mahalanobis distance between x1 and x2
    """
    diff = x1 - x2
    inv_cov = np.linalg.inv(cov)
    return np.sqrt(np.dot(diff.T, np.dot(inv_cov, diff)))

# Define the scaler function
scaler = StandardScaler()
# Apply the scaler function to all of the tumor features and transform the data
df_standardized = scaler.fit_transform(np.log2(apoe4_all_tbi_allele.iloc[:, 1:-3] + 0.001))
# Add the column names to the dataframe
df_standardized = pd.DataFrame(df_standardized, columns = apoe4_all_tbi_allele.iloc[:, 1:-3].columns)
# Perform PCA analysis
pca = PCA(n_components = 2)
df_pca = pca.fit_transform(df_standardized)
pca_analysis_df = pd.DataFrame(df_pca, columns = ['PC1', 'PC2'])
apoe4_all_tbi_allele = apoe4_all_tbi_allele.reset_index(drop=True)
# Create group labels
pca_analysis_df['group'] = apoe4_all_tbi_allele['dementia']
pca_analysis_df['group'] = pca_analysis_df['group'].replace('No', 'No Dementia')
color_palette = {'Dementia': '#8C70A9', 'No Dementia': '#FF6544'}
# Plot scatterplot
sns.set(font_scale=1.5)
ax = sns.scatterplot(data = pca_analysis_df, x = 'PC1', y = 'PC2', hue = 'group', palette=color_palette)
plt.title('PCA Analysis of APOE4+ Donors with TBI using APOE4+ Identified DEGs')
ax.legend()
plt.show()
# Print variance
print(f"Variance accounted for by the first two principal components: {sum(pca.explained_variance_ratio_[:2])}")

# Separate dementia and no dementia clusters
pca_analysis_df_dem = pca_analysis_df[pca_analysis_df['group'] == 'Dementia']
pca_analysis_df_no_dem = pca_analysis_df[pca_analysis_df['group'] == 'No Dementia']

# Calculate mahalanobis distance between clusters
dem_data_aa = pca_analysis_df_dem[['PC1', 'PC2']].values
no_dem_data_aa = pca_analysis_df_no_dem[['PC1', 'PC2']].values
# Find mean
mean_dem_data_aa = np.mean(dem_data_aa, axis=0)
mean_no_dem_data_aa = np.mean(no_dem_data_aa, axis=0)
# Find covariance
cov_dem_data_aa = np.cov(dem_data_aa, rowvar = False)
cov_no_dem_data_aa = np.cov(no_dem_data_aa, rowvar = False)
distance_aa = mahalanobis_distance(mean_dem_data_aa, mean_no_dem_data_aa, 0.5*(cov_dem_data_aa + cov_no_dem_data_aa))
print("Mahalanobis distance between group centroids:", distance_aa)

# Separate dementia and no dementia clusters
pca_analysis_df2 = pca_analysis_df[(pca_analysis_df.select_dtypes(include=[np.float64]) <= 20).all(axis=1)]
pca_analysis_df_dem = pca_analysis_df2[pca_analysis_df2['group'] == 'Dementia']
pca_analysis_df_no_dem = pca_analysis_df2[pca_analysis_df2['group'] == 'No Dementia']

# Calculate mahalanobis distance between clusters
dem_data_aa2 = pca_analysis_df_dem[['PC1', 'PC2']].values
no_dem_data_aa2 = pca_analysis_df_no_dem[['PC1', 'PC2']].values
# Find mean
mean_dem_data_aa2 = np.mean(dem_data_aa2, axis=0)
mean_no_dem_data_aa2 = np.mean(no_dem_data_aa2, axis=0)
# Find covariance
cov_dem_data_aa2 = np.cov(dem_data_aa2, rowvar = False)
cov_no_dem_data_aa2 = np.cov(no_dem_data_aa2, rowvar = False)
distance_aa2 = mahalanobis_distance(mean_dem_data_aa2, mean_no_dem_data_aa2, 0.5*(cov_dem_data_aa2 + cov_no_dem_data_aa2))
print("Mahalanobis distance between group centroids:", distance_aa2)

# Create variable to store variance ratio
variance_ratio = []
# List of number of components from 1 to 10
num_components = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Calculate the variance ratio based on the number of components
for i in range(10):
    pca = PCA(n_components = num_components[i])
    pca.fit_transform(df_standardized)
    variance_ratio.append(sum(pca.explained_variance_ratio_))
# Plot the change in variance explained as number of components increases
sns.set(font_scale = 1)
plt.bar(num_components, variance_ratio)
# Add labels
plt.xlabel('Number of Principal Components')
plt.ylabel('Proportion of Variance Explained')
plt.title('PCA Analysis of APOE4+ Donors with TBI using APOE4+ Identified DEGs:\nProportion of variance explained by the number of principal components analyzed')

# Define the scaler function
scaler = StandardScaler()
# Apply the scaler function to all of the tumor features and transform the data
df_standardized = scaler.fit_transform(np.log2(apoe4_all_tbi_no_allele.iloc[:, 1:-3] + 0.001))
# Add the column names to the dataframe
df_standardized = pd.DataFrame(df_standardized, columns = apoe4_all_tbi_no_allele.iloc[:, 1:-3].columns)
# Perform PCA analysis
pca = PCA(n_components = 2)
df_pca = pca.fit_transform(df_standardized)
pca_analysis_df = pd.DataFrame(df_pca, columns = ['PC1', 'PC2'])
apoe4_all_tbi_no_allele = apoe4_all_tbi_no_allele.reset_index(drop=True)
# Create group labels
pca_analysis_df['group'] = apoe4_all_tbi_no_allele['dementia']
pca_analysis_df['group'] = pca_analysis_df['group'].replace('No', 'No Dementia')
color_palette = {'Dementia': '#8C70A9', 'No Dementia': '#FF6544'}
# Plot scatterplot
sns.set(font_scale=1.5)
ax = sns.scatterplot(data = pca_analysis_df, x = 'PC1', y = 'PC2', hue = 'group', palette=color_palette)
plt.title('PCA Analysis of APOE4- Donors with TBI using APOE4+ Identified DEGs')
ax.legend()
plt.show()
# Print variance
print(f"Variance accounted for by the first two principal components: {sum(pca.explained_variance_ratio_[:2])}")

# Separate dementia and no dementia clusters
pca_analysis_df_dem = pca_analysis_df[pca_analysis_df['group'] == 'Dementia']
pca_analysis_df_no_dem = pca_analysis_df[pca_analysis_df['group'] == 'No Dementia']

# Calculate mahalanobis distance between clusters
dem_data_an = pca_analysis_df_dem[['PC1', 'PC2']].values
no_dem_data_an = pca_analysis_df_no_dem[['PC1', 'PC2']].values
# Find mean
mean_dem_data_an = np.mean(dem_data_an, axis=0)
mean_no_dem_data_an = np.mean(no_dem_data_an, axis=0)
# Find covariance
cov_dem_data_an = np.cov(dem_data_an, rowvar = False)
cov_no_dem_data_an = np.cov(no_dem_data_an, rowvar = False)
distance_an = mahalanobis_distance(mean_dem_data_an, mean_no_dem_data_an, 0.5*(cov_dem_data_an + cov_no_dem_data_an))
print("Mahalanobis distance between group centroids:", distance_an)

# Create variable to store variance ratio
variance_ratio = []
# List of number of components from 1 to 10
num_components = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Calculate the variance ratio based on the number of components
for i in range(10):
    pca = PCA(n_components = num_components[i])
    pca.fit_transform(df_standardized)
    variance_ratio.append(sum(pca.explained_variance_ratio_))
# Plot the change in variance explained as number of components increases
sns.set(font_scale = 1)
plt.bar(num_components, variance_ratio)
# Add labels
plt.xlabel('Number of Principal Components')
plt.ylabel('Proportion of Variance Explained')
plt.title('PCA Analysis of APOE4- Donors with TBI using APOE4+ Identified DEGs:\nProportion of variance explained by the number of principal components analyzed')

# Define the scaler function
scaler = StandardScaler()
# Apply the scaler function to all of the tumor features and transform the data
df_standardized = scaler.fit_transform(np.log2(no_apoe4_all_tbi_allele.iloc[:, 1:-3] + 0.001))
# Add the column names to the dataframe
df_standardized = pd.DataFrame(df_standardized, columns = no_apoe4_all_tbi_allele.iloc[:, 1:-3].columns)
# Perform PCA analysis
pca = PCA(n_components = 2)
df_pca = pca.fit_transform(df_standardized)
pca_analysis_df = pd.DataFrame(df_pca, columns = ['PC1', 'PC2'])
no_apoe4_all_tbi_allele = no_apoe4_all_tbi_allele.reset_index(drop=True)
# Create group labels
pca_analysis_df['group'] = no_apoe4_all_tbi_allele['dementia']
pca_analysis_df['group'] = pca_analysis_df['group'].replace('No', 'No Dementia')
color_palette = {'Dementia': '#8C70A9', 'No Dementia': '#FF6544'}
# Plot scatterplot
sns.set(font_scale=1.5)
ax = sns.scatterplot(data = pca_analysis_df, x = 'PC1', y = 'PC2', hue = 'group', palette=color_palette)
plt.title('PCA Analysis of APOE4+ Donors with TBI using APOE4- Identified DEGs')
ax.legend()
plt.show()
# Print variance
print(f"Variance accounted for by the first two principal components: {sum(pca.explained_variance_ratio_[:2])}")

# Separate dementia and no dementia clusters
pca_analysis_df_dem = pca_analysis_df[pca_analysis_df['group'] == 'Dementia']
pca_analysis_df_no_dem = pca_analysis_df[pca_analysis_df['group'] == 'No Dementia']

# Calculate mahalanobis distance between clusters
dem_data_na = pca_analysis_df_dem[['PC1', 'PC2']].values
no_dem_data_na = pca_analysis_df_no_dem[['PC1', 'PC2']].values
# Find mean
mean_dem_data_na = np.mean(dem_data_na, axis=0)
mean_no_dem_data_na = np.mean(no_dem_data_na, axis=0)
# Find covariance
cov_dem_data_na = np.cov(dem_data_na, rowvar = False)
cov_no_dem_data_na = np.cov(no_dem_data_na, rowvar = False)
distance_na = mahalanobis_distance(mean_dem_data_na, mean_no_dem_data_na, 0.5*(cov_dem_data_na + cov_no_dem_data_na))
print("Mahalanobis distance between group centroids:", distance_na)

# Create variable to store variance ratio
variance_ratio = []
# List of number of components from 1 to 10
num_components = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Calculate the variance ratio based on the number of components
for i in range(10):
    pca = PCA(n_components = num_components[i])
    pca.fit_transform(df_standardized)
    variance_ratio.append(sum(pca.explained_variance_ratio_))
# Plot the change in variance explained as number of components increases
sns.set(font_scale = 1)
plt.bar(num_components, variance_ratio)
# Add labels
plt.xlabel('Number of Principal Components')
plt.ylabel('Proportion of Variance Explained')
plt.title('PCA Analysis of APOE4+ Donors with TBI using APOE4- Identified DEGs:\nProportion of variance explained by the number of principal components analyzed')

# Define the scaler function
scaler = StandardScaler()
# Apply the scaler function to all of the tumor features and transform the data
df_standardized = scaler.fit_transform(np.log2(no_apoe4_all_tbi_no_allele.iloc[:, 1:-3] + 0.001))
# Add the column names to the dataframe
df_standardized = pd.DataFrame(df_standardized, columns = no_apoe4_all_tbi_no_allele.iloc[:, 1:-3].columns)
# Perform PCA analysis
pca = PCA(n_components = 2)
df_pca = pca.fit_transform(df_standardized)
pca_analysis_df = pd.DataFrame(df_pca, columns = ['PC1', 'PC2'])
no_apoe4_all_tbi_no_allele = no_apoe4_all_tbi_no_allele.reset_index(drop=True)
# Create group labels
pca_analysis_df['group'] = no_apoe4_all_tbi_no_allele['dementia']
pca_analysis_df['group'] = pca_analysis_df['group'].replace('No', 'No Dementia')
color_palette = {'Dementia': '#8C70A9', 'No Dementia': '#FF6544'}
# Plot scatterplot
sns.set(font_scale=1.5)
ax = sns.scatterplot(data = pca_analysis_df, x = 'PC1', y = 'PC2', hue = 'group', palette=color_palette)
plt.title('PCA Analysis of APOE4- Donors with TBI using APOE4- Identified DEGs')
ax.legend()
plt.show()
# Print variance
print(f"Variance accounted for by the first two principal components: {sum(pca.explained_variance_ratio_[:2])}")

# Separate dementia and no dementia clusters
pca_analysis_df_dem = pca_analysis_df[pca_analysis_df['group'] == 'Dementia']
pca_analysis_df_no_dem = pca_analysis_df[pca_analysis_df['group'] == 'No Dementia']

# Calculate mahalanobis distance between clusters
dem_data_nn = pca_analysis_df_dem[['PC1', 'PC2']].values
no_dem_data_nn = pca_analysis_df_no_dem[['PC1', 'PC2']].values
# Find mean
mean_dem_data_nn = np.mean(dem_data_nn, axis=0)
mean_no_dem_data_nn = np.mean(no_dem_data_nn, axis=0)
# Find covariance
cov_dem_data_nn = np.cov(dem_data_nn, rowvar = False)
cov_no_dem_data_nn = np.cov(no_dem_data_nn, rowvar = False)
distance_nn = mahalanobis_distance(mean_dem_data_nn, mean_no_dem_data_nn, 0.5*(cov_dem_data_nn + cov_no_dem_data_nn))
print("Mahalanobis distance between group centroids:", distance_nn)

# Create variable to store variance ratio
variance_ratio = []
# List of number of components from 1 to 10
num_components = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Calculate the variance ratio based on the number of components
for i in range(10):
    pca = PCA(n_components = num_components[i])
    pca.fit_transform(df_standardized)
    variance_ratio.append(sum(pca.explained_variance_ratio_))
# Plot the change in variance explained as number of components increases
sns.set(font_scale = 1)
plt.bar(num_components, variance_ratio)
# Add labels
plt.xlabel('Number of Principal Components')
plt.ylabel('Proportion of Variance Explained')
plt.title('PCA Analysis of APOE4- Donors with TBI using APOE4- Identified DEGs:\nProportion of variance explained by the number of principal components analyzed')

print("Mahalanobis distance between group centroids aa:", distance_aa)
print("Mahalanobis distance between group centroids aa2:", distance_aa2)
print("Mahalanobis distance between group centroids an:", distance_an)
print("Mahalanobis distance between group centroids na:", distance_na)
print("Mahalanobis distance between group centroids nn:", distance_nn)

distance_nn/distance_an

distance_aa2/distance_na